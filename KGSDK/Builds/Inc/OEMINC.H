#ifndef _OEMINC_H_
#define _OEMINC_H_

#ifdef __cplusplus
extern "C" {
#endif

///////////////////////////////////////////////////////////////////////////
// Public Registry Keys and Values
///////////////////////////////////////////////////////////////////////////

// Backlight registry keys and values (HKCU)
#define REGKEY_BACKLIGHT		TEXT("ControlPanel\\Backlight")
#define BACKLIGHT_MAX			31			// Maximum backlight level
#define BACKLIGHT_MIN			1			// Minimum backlight level
#define	BACKLIGHT_DEF			24			// Default backlight level
#define BACKLIGHT_DIM_DEF		8			// Default dim level
#define BACKLIGHT_BATT_TIMEOUT	15			// Default battery timeout
#define BACKLIGHT_AC_TIMEOUT	15			// Default AC timeout

#define REGVAL_LEVEL			TEXT("Level")
#define REGVAL_ON_LEVEL			TEXT("OnLevel")
#define REGVAL_DIM_LEVEL		TEXT("DimLevel")

#define EVENTNAME_BACKLIGHTCHANGEEVENT  TEXT("BackLightChangeEvent")

///////////////////////////////////////////////////////////////////////////
// Kernel I/O Control Codes
///////////////////////////////////////////////////////////////////////////

#define IOCTL_OEM_GET_DEVICEVER		CTL_CODE(FILE_DEVICE_HAL, 2001, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_INTERRUPTS_OFF	CTL_CODE(FILE_DEVICE_HAL, 2004, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_INTERRUPTS_ON		CTL_CODE(FILE_DEVICE_HAL, 2005, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_OEM_DEBUG_SERIAL		CTL_CODE(FILE_DEVICE_HAL, 2008, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_GET_ALARMTIME		CTL_CODE(FILE_DEVICE_HAL, 2009, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_RESTART			CTL_CODE(FILE_DEVICE_HAL, 2010, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_POWEROFF			CTL_CODE(FILE_DEVICE_HAL, 2011, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_OEM_MODIFYREGISTER	CTL_CODE(FILE_DEVICE_HAL, 2020, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_GET_CLOCKFREQ		CTL_CODE(FILE_DEVICE_HAL, 2021, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_GET_CONFIG_RECORD	CTL_CODE(FILE_DEVICE_HAL, 2022, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_OEM_SET_POWEROFFFLAG	CTL_CODE(FILE_DEVICE_HAL, 2025, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_SET_OFFTIMEOUT	CTL_CODE(FILE_DEVICE_HAL, 2026, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_GET_OFFTIMEOUT	CTL_CODE(FILE_DEVICE_HAL, 2027, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_OEM_GET_ENCRYPTION_KEY	CTL_CODE(FILE_DEVICE_HAL, 2030, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_SHELL_STARTED		CTL_CODE(FILE_DEVICE_HAL, 2035, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_SET_LOGO			CTL_CODE(FILE_DEVICE_HAL, 2040, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_OEM_GET_UPDATE_KEY	CTL_CODE(FILE_DEVICE_HAL, 2050, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define	IOCTL_OEM_KEYLOCK			CTL_CODE(FILE_DEVICE_HAL, 2060, METHOD_BUFFERED, FILE_ANY_ACCESS)

// Default suspend to power off timeout (minutes)
#define DEF_SUSPEND_TIMEOUT		(5 * 24 * 60)

//////////////////////////////////////////////////////////////////////////
// Version identifiers for IOCTL_OEM_GET_DEVICEVER
//////////////////////////////////////////////////////////////////////////

#define DEVICEVER_OAL			1		// Kernel OAL
#define DEVICEVER_BOOT			2		// Bootloader
#define DEVICEVER_FPGA			3		// FPGA
#define DEVICEVER_PCB			4		// PCB
#define DEVICEVER_CPLD			5		// CPLD

//////////////////////////////////////////////////////////////////////////
// IOCTL_OEM_MODIFYREGISTER input parameter structure
//////////////////////////////////////////////////////////////////////////

typedef struct {
	ULONG	ulRegSize;				// sizeof(reg)
	ULONG	ulRegFlags;				// Special handling flag(s), see below
	ULONG	ulRegAddr;				// Virtual address of register
	ULONG	ulAndMask;				// Value to AND with existing contents
	ULONG	ulXorMask;				// Value to XOR with after AND operation
									//		AND=0 XOR=0 => clear
									//		AND=0 XOR=1 => set
									//		AND=1 XOR=0 => leave
									//		AND=1 XOR=1 => toggle
} MODIFY_REGISTER_STRUCT, *PMODIFY_REGISTER_STRUCT;

// ulRegFlags
#define MODIFY_REGISTER_FLAG_NONE		0x00000000
#define MODIFY_REGISTER_FLAG_VOLATILE	0x00000001

//////////////////////////////////////////////////////////////////////////
// OEM-Specific Virtual Key Codes
///////////////////////////////////////////////////////////////////////////

#define VK_VOL_DN	(VK_F1)		// Volume down key
#define VK_VOL_UP	(VK_F2)		// Volume up key
#define VK_BACKLIGHT (VK_F3)	// Backlight key
#define VK_PANIC	(VK_F4)		// Panic key

#define VK_SUSPEND	(VK_F11)	// Power key - suspend
#define VK_PWROFF	(VK_F12)	// Power key - power off

///////////////////////////////////////////////////////////////////////////
// Display Driver
///////////////////////////////////////////////////////////////////////////

// Lock out GDI from accessing physical frame buffer
#define DRVESC_EXCLUSIVEMODE	10000

// Allow GDI to access frame buffer as normal
#define DRVESC_NORMALMODE		10001

// Named events
#define DISPLAY_FRAME_EVENT		TEXT("DISPLAY_FRAME_EVENT")

///////////////////////////////////////////////////////////////////////////
// Serial Driver Control Codes
///////////////////////////////////////////////////////////////////////////

#define	IOCTL_OEM_GSM_GETTYPE		CTL_CODE(FILE_DEVICE_SERIAL_PORT , 1000, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define	IOCTL_OEM_GSM_ON			CTL_CODE(FILE_DEVICE_SERIAL_PORT , 1001, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define	IOCTL_OEM_GSM_OFF			CTL_CODE(FILE_DEVICE_SERIAL_PORT , 1002, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_GSM_RESET			CTL_CODE(FILE_DEVICE_SERIAL_PORT , 1003, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_GSM_TOGGLE		CTL_CODE(FILE_DEVICE_SERIAL_PORT , 1004, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_GSM_GETPOWERSTATE	CTL_CODE(FILE_DEVICE_SERIAL_PORT , 1005, METHOD_BUFFERED, FILE_ANY_ACCESS)

// GSM modem types
typedef enum {
	GSM_TYPE_UNKNOWN = 0, 			// unknown modem
	GSM_TYPE_CMCS, 					// CMCS
	GSM_TYPE_MC55, 					// Siemens MC55
} GSM_TYPE, *PGSM_TYPE;

#define IOCTL_OEM_GPS_ON			CTL_CODE(FILE_DEVICE_SERIAL_PORT , 2001, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_GPS_OFF			CTL_CODE(FILE_DEVICE_SERIAL_PORT , 2002, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_GPS_BOOTSEL		CTL_CODE(FILE_DEVICE_SERIAL_PORT , 2003, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_GPS_WAKEUP		CTL_CODE(FILE_DEVICE_SERIAL_PORT , 2004, METHOD_BUFFERED, FILE_ANY_ACCESS)

///////////////////////////////////////////////////////////////////////////
// Camera Driver I/O Control Codes
///////////////////////////////////////////////////////////////////////////

#define IOCTL_OEM_CAM_SETFORMAT		CTL_CODE(FILE_DEVICE_HAL, 2101, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_CAM_GETFORMAT		CTL_CODE(FILE_DEVICE_HAL, 2102, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_CAM_START			CTL_CODE(FILE_DEVICE_HAL, 2103, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_CAM_STOP			CTL_CODE(FILE_DEVICE_HAL, 2104, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_CAM_PREVIEW		CTL_CODE(FILE_DEVICE_HAL, 2105, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_CAM_CAPTURE		CTL_CODE(FILE_DEVICE_HAL, 2106, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_CAM_GETTHREADS	CTL_CODE(FILE_DEVICE_HAL, 2107, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_CAM_WRITE			CTL_CODE(FILE_DEVICE_HAL, 2108, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_CAM_READ			CTL_CODE(FILE_DEVICE_HAL, 2109, METHOD_BUFFERED, FILE_ANY_ACCESS)

// Capture buffer sizes
#define CAM_CAPTURE_CX		640
#define CAM_CAPTURE_CY		480
#define CAM_PREVIEW_CX		320
#define CAM_PREVIEW_CY		240

// Default frame capture timeout (ms)
#define CAM_TIMEOUT			1000

// Capture frame information structure
typedef struct {
	DWORD	dwWidth;				// capture buffer width, pixels (IN)
	DWORD	dwHeight;				// capture buffer height, lines (IN)
	DWORD	dwFrameCount;			// number of captured frame (IN/OUT)
	DWORD	dwTimeout;				// frame grabber timeout (IN)
} VINFRAMEINFO, *PVINFRAMEINFO;

///////////////////////////////////////////////////////////////////////////
// Bluetooth Control Driver I/O Control Codes
///////////////////////////////////////////////////////////////////////////

#define IOCTL_OEM_BLUETOOTH_ON		CTL_CODE(FILE_DEVICE_HAL, 2120, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_BLUETOOTH_OFF		CTL_CODE(FILE_DEVICE_HAL, 2121, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define	ENABLE_BLUETOOTH_DUT		0xFF
#define	ENABLE_BLUETOOTH_FTS		0xFE

///////////////////////////////////////////////////////////////////////////
// Watchdog Driver I/O Control Codes
///////////////////////////////////////////////////////////////////////////

#define IOCTL_OEM_WDOG_KICK			CTL_CODE(FILE_DEVICE_HAL, 2130, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_WDOG_DISABLE		CTL_CODE(FILE_DEVICE_HAL, 2131, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_WDOG_PERIOD		CTL_CODE(FILE_DEVICE_HAL, 2132, METHOD_BUFFERED, FILE_ANY_ACCESS)

///////////////////////////////////////////////////////////////////////////
// Wave Driver I/O Control Codes
///////////////////////////////////////////////////////////////////////////

#define IOCTL_OEM_SYNTH_ENABLE		CTL_CODE(FILE_DEVICE_SOUND, 1010, METHOD_BUFFERED, FILE_ANY_ACCESS)

///////////////////////////////////////////////////////////////////////////
// MASG Driver (MIDI/MP3) I/O Control Codes
///////////////////////////////////////////////////////////////////////////

#define IOCTL_OEM_MASG_START		CTL_CODE(FILE_DEVICE_SOUND, 1020, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_MASG_WRITE		CTL_CODE(FILE_DEVICE_SOUND, 1021, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_MASG_STOP			CTL_CODE(FILE_DEVICE_SOUND, 1022, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_MASG_PAUSE		CTL_CODE(FILE_DEVICE_SOUND, 1024, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_MASG_RESUME		CTL_CODE(FILE_DEVICE_SOUND, 1026, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_MASG_STATE		CTL_CODE(FILE_DEVICE_SOUND, 1028, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_MASG_GETPOSITION	CTL_CODE(FILE_DEVICE_SOUND, 1030, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_MASG_GETVOLUME	CTL_CODE(FILE_DEVICE_SOUND, 1032, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_MASG_SETVOLUME	CTL_CODE(FILE_DEVICE_SOUND, 1034, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_MASG_HAS_MP3		CTL_CODE(FILE_DEVICE_SOUND, 1036, METHOD_BUFFERED, FILE_ANY_ACCESS)

// MASG hardware states
typedef enum {
	MASG_UNKNOWN = -1, 				// unknown state
	MASG_OFF = 0, 					// hardware is off
	MASG_DSPON,						// clocks and DSP are on
	MASG_RUN, 						// DSP is running
	MASG_STARTING,					// playback is starting
	MASG_PLAYING, 					// playback is in progress
	MASG_PAUSED, 					// playback is paused
	MASG_WAITING, 					// waiting for playback completion
	MASG_DONE,						// playback is complete
} MASG_STATE, *PMASG_STATE;

///////////////////////////////////////////////////////////////////////////
// SD/MMC Driver
///////////////////////////////////////////////////////////////////////////

// Named events
#define SDMMC_INSERT_EVENT		TEXT("SDMMC_INSERT_EVENT")
#define SDMMC_REMOVE_EVENT		TEXT("SDMMC_REMOVE_EVENT")

///////////////////////////////////////////////////////////////////////////
// System process registration service IOCTLs
///////////////////////////////////////////////////////////////////////////

#define IOCTL_OEM_REGISTER_PROCESS			CTL_CODE(FILE_DEVICE_HAL, 2140, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OEM_DEREGISTER_PROCESS		CTL_CODE(FILE_DEVICE_HAL, 2141, METHOD_BUFFERED, FILE_ANY_ACCESS)

//////////////////////////////////////////////////////////////////////////
// Interrupt Control macros
///////////////////////////////////////////////////////////////////////////

#define	OEM_INTERRUPTS_OFF()	{ \
	DWORD cbRet; \
	KernelIoControl (IOCTL_OEM_INTERRUPTS_OFF,NULL,0,NULL,0,&cbRet); \
}
#define	OEM_INTERRUPTS_ON()	{ \
	DWORD cbRet; \
	KernelIoControl (IOCTL_OEM_INTERRUPTS_ON,NULL,0,NULL,0,&cbRet); \
}

///////////////////////////////////////////////////////////////////////////

#ifdef __cplusplus
}
#endif

#endif	// _OEMINC_H_
